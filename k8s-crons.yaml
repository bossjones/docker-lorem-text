apiVersion: batch/v1beta1
kind: CronJob
metadata:
  labels:
    app: docker-lorem-test
  name: stage-docker-lorem-test
spec:
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: docker-lorem-test
        spec:
          containers:
          - args:
            - |
              trap "touch /tmp/pod/main-terminated" EXIT
              /app/bin/cron_runner /app/run.py
            command: ["/bin/bash", "-c"]
            env:
            - name: POD_UID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.uid
            - name: SERVER_APP_NAME
              value: "docker-lorem-test"
            - name: CFG_APP_DEBUG
              value: "1"
            - name: SERVER_LOG_MINIMAL
              value: "1"
            - name: PHP_FPM_MEMORY_LIMIT
              value: 257M
            - name: PHP_FPM_MAX_EXECUTION_TIME
              value: "61"
            - name: PHP_FPM_UPLOAD_MAX_FILESIZE
              value: 100M
            - name: SERVER_MAX_BODY_SIZE
              value: 100m
            - name: REPLACE_NEWRELIC_APP
              value: abcdefg
            - name: REPLACE_NEWRELIC_LICENSE
              value: hijklmno
            - name: S6_KILL_FINISH_MAXTIME
              value: "5000"
            - name: S6_KILL_GRACETIME
              value: "60000"
            - name: S6_SERVICES_GRACETIME
              value: "60000"
            image:  bossjones/docker-lorem-text:2-ubuntu-20.04
            imagePullPolicy: Always
            name: docker-lorem-test
            resources:
              limits:
                cpu: "1"
                memory: 300Mi
              requests:
                cpu: 500m
                memory: 200Mi
            volumeMounts:
            - mountPath: /tmp/pod
              name: tmp-pod
          - env:
            - name: POD_UID_FLUENT_BIT
              valueFrom:
                fieldRef:
                  fieldPath: metadata.uid
            - name: POD_UID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.uid
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: NODE_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: LOG_PARSER
              value: docker
            image: bossjones/test-fluent-bit:1.5.4-debug
            imagePullPolicy: Always
            name: fluent-bit
            ports:
            - containerPort: 2020
            resources:
              limits:
                cpu: 250m
                memory: 512Mi
              requests:
                cpu: 50m
                memory: 128Mi
            volumeMounts:
            - mountPath: /logging-volume
              name: logging-volume
            - mountPath: /var/fluent-bit
              name: fluent-data
            - mountPath: /fluent-bit/etc
              name: fluent-bit-config
            - mountPath: /tmp/pod
              name: tmp-pod
              readOnly: true
          # FIXME: To do, we need to syncronize these tasks between sidecars
          # See possible solution: https://github.com/kubernetes/kubernetes/issues/25908#issuecomment-308569672
          # - args:
          #   - |
          #     ps auxef;
          #     until pgrep -f "/bin/bash -e /app/bin/cron_runner /app/run.py" &> /dev/null; do echo "Waiting for cron_runner to start up so we can get the pid ..."; sleep 1; done
          #     CRON_PID=$(pgrep -f "/bin/bash -e /app/bin/cron_runner /app/run.py")
          #     echo " [info] cron pid acquired CRON_PID=${CRON_PID}"
          #     until pgrep -f "^/fluent-bit/bin/fluent-bit -c /fluent-bit/etc/fluent-bit.conf" &> /dev/null; do echo "Waiting for fluent-bit to start up so we can get the pid ..."; sleep 1; done
          #     FLUENTBIT_PID=$(pgrep -f "^/fluent-bit/bin/fluent-bit -c /fluent-bit/etc/fluent-bit.conf")
          #     echo " [info] fluent-bit pid acquired on FLUENTBIT_PID=${FLUENTBIT_PID}"
          #     (while true; do if [[ -f "/tmp/pod/main-terminated" ]]; then kill $(pgrep -f "^s6-svscan -t0 /var/run/s6/services") && break; else echo "still waiting for cron to finish"; fi; sleep 1; done) &
          #     tail --pid=$FLUENTBIT_PID -f /dev/null
          #     echo " [info] seems fluent-bit is dead. Let's finish up by bringing the observer down s6 using s6-svscanctl"
          #     # s6-svscanctl -t /var/run/s6/services
          #     if [[ -f "/tmp/pod/main-terminated" ]]; then exit 0; fi
          - args:
            - |
              ps auxef;
              until pgrep -f "/bin/bash -e /app/bin/cron_runner /app/run.py" &> /dev/null; do echo "Waiting for cron_runner to start up so we can get the pid ..."; sleep 1; done
              CRON_PID=$(pgrep -f "/bin/bash -e /app/bin/cron_runner /app/run.py")
              echo " [info] cron pid acquired CRON_PID=${CRON_PID}"
              until pgrep -f "^/fluent-bit/bin/fluent-bit -c /fluent-bit/etc/fluent-bit.conf" &> /dev/null; do echo "Waiting for fluent-bit to start up so we can get the pid ..."; sleep 1; done
              FLUENTBIT_PID=$(pgrep -f "^/fluent-bit/bin/fluent-bit -c /fluent-bit/etc/fluent-bit.conf")
              echo " [info] fluent-bit pid acquired on FLUENTBIT_PID=${FLUENTBIT_PID}"
              # tail --pid=$FLUENTBIT_PID -f /dev/null
              # echo " [info] seems fluent-bit is dead."
              if [[ -f "/tmp/pod/main-terminated" ]]; then exit 0; fi
            command: ["/bin/bash", "-xc"]
            # s6-svc -wD -d  /var/run/s6/services/fluent-bit
            # s6-svscanctl -t /var/run/s6/services
            image: behance/docker-base:2.7.0-ubuntu-20.04
            volumeMounts:
            - mountPath: /tmp/pod
              name: tmp-pod
              readOnly: true
            # tail --pid=$CRON_PID -f /dev/null && CRON_PID=$(pidof fluent-bit)
            # s6_pid=$(pgrep s6-svscan) fluentbit_pid=$(pgrep fluent-bit) cron_pid=$(pidof cron_runner); tail --pid=$cron_pid -f /dev/null && kill -15 $s6_pid;
            name: observer-sidecar
            resources:
              limits:
                cpu: 90m
                memory: 100Mi
              requests:
                cpu: 50m
                memory: 50Mi
            securityContext:
              capabilities:
                add:
                - SYS_PTRACE
          restartPolicy: Never
          shareProcessNamespace: true
          volumes:
          - emptyDir: {}
            name: tmp-pod
          - emptyDir: {}
            name: logging-volume
          - emptyDir: {}
            name: fluent-data
          - configMap:
              name: fluent-bit-sidecar-config
            name: fluent-bit-config
  schedule: '*/1 * * * *'
